name: Submission Validator

on:
  push:
    branches: [ submit, main, master ]
    paths:
      - '**.py'
      - '**.ipynb'
      - '**.md'
      - '**.txt'
      - '**.csv'
      - '**.json'
  
  pull_request:
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: '3.9'

jobs:
  validate-submission:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout submission
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install validation tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy bandit jupyter nbformat
        
    - name: Check file structure
      run: |
        echo "üîç Validating submission structure..."
        
        # Check for required files
        required_files=("main.py")
        missing_files=""
        
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            missing_files="$missing_files $file"
          fi
        done
        
        if [[ -n "$missing_files" ]]; then
          echo "‚ùå Missing required files:$missing_files"
          echo "::error::Missing required files:$missing_files"
          exit 1
        fi
        
        echo "‚úÖ All required files present"
        
        # Check file sizes (prevent accidentally huge files)
        echo "üìä Checking file sizes..."
        find . -type f -size +10M -not -path "./.git/*" | while read file; do
          echo "‚ö†Ô∏è  Large file detected: $file ($(du -h "$file" | cut -f1))"
          echo "::warning::Large file detected: $file"
        done
        
    - name: Validate Python syntax
      run: |
        echo "üêç Checking Python syntax..."
        
        # Find all Python files
        python_files=$(find . -name "*.py" -not -path "./.git/*")
        
        if [[ -z "$python_files" ]]; then
          echo "‚ö†Ô∏è  No Python files found"
          exit 0
        fi
        
        syntax_errors=0
        for file in $python_files; do
          echo "Checking $file..."
          if ! python -m py_compile "$file"; then
            echo "‚ùå Syntax error in $file"
            syntax_errors=$((syntax_errors + 1))
          fi
        done
        
        if [[ $syntax_errors -gt 0 ]]; then
          echo "::error::Found $syntax_errors syntax errors"
          exit 1
        fi
        
        echo "‚úÖ No syntax errors found"
        
    - name: Run code quality checks
      run: |
        echo "üìã Running code quality checks..."
        
        python_files=$(find . -name "*.py" -not -path "./.git/*")
        
        if [[ -z "$python_files" ]]; then
          echo "No Python files to check"
          exit 0
        fi
        
        # Check code formatting with black (don't enforce, just warn)
        echo "Checking code formatting..."
        if ! black --check --diff $python_files 2>/dev/null; then
          echo "::warning::Code formatting could be improved. Consider running 'black *.py'"
        else
          echo "‚úÖ Code formatting looks good"
        fi
        
        # Check code style with flake8 (relaxed rules for students)
        echo "Checking code style..."
        if ! flake8 $python_files --max-line-length=100 --ignore=E203,W503 2>/dev/null; then
          echo "::warning::Some style issues found. Consider fixing for better readability"
        else
          echo "‚úÖ Code style looks good"
        fi
        
    - name: Security scan
      run: |
        echo "üîí Running basic security scan..."
        
        python_files=$(find . -name "*.py" -not -path "./.git/*")
        
        if [[ -z "$python_files" ]]; then
          echo "No Python files to scan"
          exit 0
        fi
        
        # Check for dangerous patterns
        dangerous_patterns="exec eval __import__ compile"
        security_issues=0
        
        for pattern in $dangerous_patterns; do
          if grep -r "$pattern" $python_files 2>/dev/null; then
            echo "‚ö†Ô∏è  Found potentially dangerous pattern: $pattern"
            echo "::warning::Found potentially dangerous pattern: $pattern"
            security_issues=$((security_issues + 1))
          fi
        done
        
        # Check for hardcoded secrets/passwords
        if grep -ri "password\|secret\|token\|key.*=" $python_files 2>/dev/null | grep -v "# " | head -5; then
          echo "‚ö†Ô∏è  Possible hardcoded credentials detected"
          echo "::warning::Possible hardcoded credentials detected"
          security_issues=$((security_issues + 1))
        fi
        
        if [[ $security_issues -eq 0 ]]; then
          echo "‚úÖ No obvious security issues found"
        else
          echo "‚ö†Ô∏è  Found $security_issues potential security concerns"
        fi
        
    - name: Validate notebooks
      run: |
        echo "üìì Validating Jupyter notebooks..."
        
        notebooks=$(find . -name "*.ipynb" -not -path "./.git/*")
        
        if [[ -z "$notebooks" ]]; then
          echo "No Jupyter notebooks found"
          exit 0
        fi
        
        notebook_errors=0
        for notebook in $notebooks; do
          echo "Checking $notebook..."
          if ! python -c "
        import json
        import sys
        try:
            with open('$notebook', 'r') as f:
                nb = json.load(f)
            
            # Basic structure validation
            if 'cells' not in nb:
                print('‚ùå Invalid notebook structure: missing cells')
                sys.exit(1)
            
            # Check for executed cells (should have outputs)
            executed_cells = 0
            for cell in nb['cells']:
                if cell.get('cell_type') == 'code' and cell.get('outputs'):
                    executed_cells += 1
            
            if executed_cells == 0:
                print('‚ö†Ô∏è  Notebook appears to have no executed cells')
                print('::warning::Notebook $notebook appears unexecuted')
            else:
                print(f'‚úÖ Notebook has {executed_cells} executed cells')
                
        except json.JSONDecodeError:
            print('‚ùå Invalid JSON in notebook')
            sys.exit(1)
        except Exception as e:
            print(f'‚ùå Error validating notebook: {e}')
            sys.exit(1)
        "; then
            notebook_errors=$((notebook_errors + 1))
          fi
        done
        
        if [[ $notebook_errors -gt 0 ]]; then
          echo "::error::Found issues in $notebook_errors notebooks"
          exit 1
        fi
        
        echo "‚úÖ All notebooks validated successfully"
        
    - name: Check documentation
      run: |
        echo "üìù Checking documentation..."
        
        # Check for README file
        readme_files=(README.md README.txt readme.md readme.txt)
        readme_found=false
        
        for readme in "${readme_files[@]}"; do
          if [[ -f "$readme" ]]; then
            echo "‚úÖ Found documentation: $readme"
            readme_found=true
            
            # Check if README is not empty
            if [[ $(wc -w < "$readme") -lt 10 ]]; then
              echo "‚ö†Ô∏è  Documentation is very brief"
              echo "::warning::README file is very brief, consider adding more details"
            fi
            break
          fi
        done
        
        if [[ "$readme_found" == false ]]; then
          echo "‚ö†Ô∏è  No README file found"
          echo "::warning::Consider adding a README.md file to document your solution"
        fi
        
        # Check for docstrings in Python files
        python_files=$(find . -name "*.py" -not -path "./.git/*")
        
        if [[ -n "$python_files" ]]; then
          echo "Checking for function documentation..."
          
          undocumented_functions=0
          for file in $python_files; do
            # Count functions without docstrings
            undoc_in_file=$(python -c "
        import ast
        import sys
        
        try:
            with open('$file', 'r') as f:
                tree = ast.parse(f.read())
            
            undocumented = 0
            for node in ast.walk(tree):
                if isinstance(node, ast.FunctionDef):
                    if not ast.get_docstring(node):
                        undocumented += 1
            
            print(undocumented)
        except:
            print(0)
        ")
            undocumented_functions=$((undocumented_functions + undoc_in_file))
          done
          
          if [[ $undocumented_functions -gt 0 ]]; then
            echo "‚ö†Ô∏è  Found $undocumented_functions functions without docstrings"
            echo "::warning::Consider adding docstrings to your functions for better documentation"
          else
            echo "‚úÖ All functions have documentation"
          fi
        fi
        
    - name: Generate validation report
      if: always()
      run: |
        echo "üìä Generating validation report..."
        
        # Create validation summary
        cat > VALIDATION_REPORT.md << 'EOF'
        # Submission Validation Report
        
        This automated validation was run on your submission to check for common issues.
        
        ## ‚úÖ Validation Passed
        - File structure is correct
        - No syntax errors found
        - Basic security scan completed
        
        ## Recommendations
        - Consider using consistent code formatting (run `black *.py`)
        - Add docstrings to your functions for better documentation
        - Include a detailed README.md file
        
        ---
        *This validation does not guarantee a perfect score - it only checks for basic requirements.*
        EOF
        
        echo "Validation report generated"
        
    - name: Upload validation artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: validation-report
        path: |
          VALIDATION_REPORT.md
        retention-days: 7
        
    - name: Success message
      run: |
        echo "üéâ Submission validation completed successfully!"
        echo ""
        echo "Your submission has passed basic validation checks."
        echo "The auto-grader will run next to evaluate your solution."